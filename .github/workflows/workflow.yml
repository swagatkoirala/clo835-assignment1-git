name: SQL and Web Application - Deploy to ECR
#test the project 1
on: 
  pull_request:
    branches:
      - main
    types:
      - closed

jobs:
  build:
    if: github.event.pull_request.merged == true
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true
        registry-type: private
        skip-logout: false
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push SQL and WebApp images to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        SQL_ECR_REPOSITORY: clo835-assignment1-sql-image
        WEBAPP_ECR_REPOSITORY: clo835-assignment1-webapp-image
        IMAGE_TAG: v0.1
      run: |
        cd web/
        ls -ltra
        # Build Docker images
        docker build -t $ECR_REGISTRY/$SQL_ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile_mysql .
        docker build -t $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .

        # Push images to ECR
        docker push $ECR_REGISTRY/$SQL_ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$WEBAPP_ECR_REPOSITORY:$IMAGE_TAG

    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/assignment1.pem
        chmod 600 ~/.ssh/assignment1.pem
      
    - name: Copy SQL file to EC2
      run: |
        cd web/
        scp -o StrictHostKeyChecking=no -i ~/.ssh/assignment1.pem mysql.sql ec2-user@${{ secrets.EC2_PUBLIC_IP }}:/home/ec2-user/mysql.sql

    - name: Deploy to EC2 and Run Containers
      run: |
        ssh -t -o StrictHostKeyChecking=no -i ~/.ssh/assignment1.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'

        echo "Setting up AWS credentials..."
        mkdir -p ~/.aws
        cat <<EOT > ~/.aws/credentials
        [default]
        aws_access_key_id=${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_access_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws_session_token=${{ secrets.AWS_SESSION_TOKEN }}
        region=us-east-1
        EOT
        chmod 600 ~/.aws/credentials
        echo "AWS credentials configured successfully."

        # Ensure Docker is installed
        if ! command -v docker &> /dev/null
        then
            echo "Docker not found! Installing..."
            sudo yum update -y
            sudo yum install -y docker
        fi

        echo "Starting Docker service..."
        sudo systemctl start docker
        sudo systemctl enable docker
        sudo usermod -aG docker ec2-user

        echo "Logging into Amazon ECR on EC2..."
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
        aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.us-east-1.amazonaws.com

        echo "Creating Docker network..."
        docker network create webapp-network || true

        echo "Pulling Docker images from Amazon ECR..."
        docker pull ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-sql-image:v0.1     
        docker pull ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1  
            
        echo "Starting MySQL container..."
        docker run -d --name mysql --network webapp-network -e MYSQL_ROOT_PASSWORD=admin -e MYSQL_DATABASE=employees -p 3306:3306 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-sql-image:v0.1

        echo "Waiting for MySQL to start..."
        sleep 30

        echo "Copying SQL file into MySQL container..."
        docker cp /home/ec2-user/mysql.sql mysql:/mysql.sql

        echo "Executing SQL script inside MySQL container..."
        docker exec -i mysql mysql -u root -p admin employees < /mysql.sql

        echo "Starting Web Application containers..."
        docker run -d --name blue-container --network webapp-network -e APP_COLOR=blue -e DBHOST=mysql -e DBPORT=3306 -e DBUSER=root -e DBPWD=admin -e DATABASE=employees -p 8081:8080 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1
        docker run -d --name pink-container --network webapp-network -e APP_COLOR=pink -e DBHOST=mysql -e DBPORT=3306 -e DBUSER=root -e DBPWD=admin -e DATABASE=employees -p 8082:8080 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1
        docker run -d --name lime-container --network webapp-network -e APP_COLOR=lime -e DBHOST=mysql -e DBPORT=3306 -e DBUSER=root -e DBPWD=admin -e DATABASE=employees -p 8083:8080 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1

        echo "Verifying running containers..."
        docker ps

        EOF
