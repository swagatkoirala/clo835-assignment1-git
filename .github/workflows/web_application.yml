name: Webapp-Deploy to ECR
on: 
  push:
    branches: [ main ]
jobs:
  build:
    name: Build Image
    runs-on: ubuntu-latest
    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      with:
        mask-password: true
        registry-type: private
        skip-logout: false
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
        AWS_REGION: us-east-1

    - name: Build, test, tag, and push webapp image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: clo835-assignment1-webapp-image
        IMAGE_TAG: v0.1
      run: |
        cd web/
        ls -ltra
        # Build Docker image
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile .
        
        # Push image to ECR
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
    
    - name: Setup SSH Key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.EC2_SSH_PRIVATE_KEY }}" > ~/.ssh/assignment1.pem
        chmod 600 ~/.ssh/assignment1.pem

    - name: Deploy to EC2 and Run Containers
      run: |
        ssh -t -o StrictHostKeyChecking=no -i ~/.ssh/assignment1.pem ec2-user@${{ secrets.EC2_PUBLIC_IP }} << 'EOF'

        # Ensure Docker is installed
        if ! command -v docker &> /dev/null
        then
            echo "Docker not found! Installing..."
            sudo yum update -y
            sudo yum install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker ec2-user
        fi

        docker network create webapp-network || true
        docker pull ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1
            
        # Run containers in detached mode
        nohup docker run -d --name blue-container --network webapp-network -e BG_COLOR=blue DB_HOST=mysql -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=my-secret-pw -e DB_NAME=mydatabase -p 8081:80 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1
        nohup docker run -d --name pink-container --network webapp-network -e BG_COLOR=pink DB_HOST=mysql -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=my-secret-pw -e DB_NAME=mydatabase -p 8082:80 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1
        nohup docker run -d --name lime-container --network webapp-network -e BG_COLOR=lime DB_HOST=mysql -e DB_PORT=3306 -e DB_USER=root -e DB_PASSWORD=my-secret-pw -e DB_NAME=mydatabase -p 8083:80 ${{ steps.login-ecr.outputs.registry }}/clo835-assignment1-webapp-image:v0.1

        # Optionally, check if the container is running
        docker ps

        EOF
